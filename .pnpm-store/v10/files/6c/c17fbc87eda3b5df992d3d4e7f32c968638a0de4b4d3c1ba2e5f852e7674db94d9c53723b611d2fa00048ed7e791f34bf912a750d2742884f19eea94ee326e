import { default as React } from 'react';
import { TypeValueLabelType } from './JsonViewer.types';
import * as themes from "./themes";
export declare const getTypeOfTheValue: (value: unknown) => TypeValueLabelType;
/** A component to render json data in a nice way. */
export declare const JsonViewer: React.FC<JsonViewerProps>;
type ThemeType = "dark" | "light";
export interface JsonViewerProps extends Omit<React.HTMLProps<HTMLDivElement>, "data"> {
    /** Pass a valid json. Required.  */
    data: string | object | object[];
    /** pass a styles object */
    style?: object;
    /** show toolbar */
    toolbar?: boolean;
    /** show root key */
    showRoot?: boolean;
    /** dark, light or map of colors
     *
     * @param dark dark theme
     * @param light light theme
     * @param base00 background
     * @param base01 NOT used
     * @param base02 border, NaN,null, undefined background
     * @param base03 NOT used
     * @param base04 size (x items)
     * @param base05 type "undefined"
     * @param base06 NOT used
     * @param base07 key, brace
     * @param base08 type "NaN"
     * @param base09 ellipsis (...), type "string"
     * @param base0A types: "null", "regex"
     * @param base0B type "float"
     * @param base0C index
     * @param base0D expanded icon, types: "date", "function"
     * @param base0E collapsed icon, types: "boolean"
     * @param base0F copy icon, type "integer"
     */
    theme?: themes.JsonViewerTheme | ThemeType;
    /** expanded can be true|false or a number. The number denotes the hierarchy level to which the object is expanded. */
    expanded?: boolean | number;
    truncate?: boolean | number;
    indentWidth?: number;
    className?: string;
}
export {};
//# sourceMappingURL=JsonViewer.component.d.ts.map