import { default as React, ReactNode } from 'react';
type EventUpdateHandler = (value: string) => void;
export interface CheckboxGroupContextProps {
    selectedOptions?: string[];
    handleCheckboxChange?: EventUpdateHandler;
    name?: string;
    updateSelectedValue?: EventUpdateHandler;
    disabled?: boolean;
}
export declare const CheckboxGroupContext: React.Context<CheckboxGroupContextProps | undefined>;
export declare const CheckboxGroup: React.FC<CheckboxGroupProps>;
export interface CheckboxGroupProps extends Omit<React.HTMLAttributes<HTMLDivElement>, "onChange"> {
    /** The Checkbox children of the CheckboxGroup */
    children?: ReactNode;
    /** Pass a custom className */
    className?: string;
    /** Whether all Checkboxes in the group are disabled */
    disabled?: boolean;
    /** Text to display in case validation failed or there is an error. Will set the whole group to invalid when passed. */
    errortext?: ReactNode;
    /** A text to render to further explain meaning and significance of the group */
    helptext?: ReactNode;
    /** The id of the group. If not passed, a unique id will be created and used for the group as a whole. */
    id?: string;
    invalid?: boolean;
    /** The label of the whole group. */
    label?: string;
    /** The name of all checkboxes in the group. If not passed, a unique name identifier will be created and used for the group as a whole. */
    name?: string;
    /** An onChange handler to execute when the selection of options changes */
    onChange?: EventUpdateHandler;
    /** Whether a selection in the group is required */
    required?: boolean;
    /** Array of values of individual selected options in the group */
    selected?: string[];
    /** Text to display in case validation is successful. When passed, will set the whole group to valid. */
    successtext?: ReactNode;
    /** Whether the CheckboxGroup was successfully validated */
    valid?: boolean;
}
export {};
//# sourceMappingURL=CheckboxGroup.component.d.ts.map