import { default as React } from 'react';
interface DataGridContextType {
    cellVerticalAlignment?: CellVerticalAlignmentType;
}
export declare const useDataGridContext: () => DataGridContextType;
/** The DataGrid component is the main way to display lists of items that have a bunch of metadata that you want to display.
 */
export declare const DataGrid: React.FC<DataGridProps>;
export type CellVerticalAlignmentType = "center" | "top";
export interface DataGridProps extends React.HTMLAttributes<HTMLDivElement> {
    /** Set number of columns */
    columns?: number;
    /** Set column max sizing. Default: auto. For equally sized columns use "1fr" */
    columnMaxSize?: string;
    /** Set column minimum size. Default: 0px */
    columnMinSize?: string;
    /** Specify which columns should be sized by minimum content size (i.e. as small as possible). Pass an array of column numbers (first column is 0) */
    minContentColumns?: number[];
    /** Set the grid column template in CSS grid 'grid-template-columns' notation. If this prop is passed, all other template props (columns, columnMaxSize,
     *  columnMinSize, minContentColumns) are ignored. The easiest case where you might need this is e.g. if you want to set specific column widths for some
     *  or all columns, e.g. "20% auto auto 10%" (The first column is set to 20%, the next two to auto size, the last to 10%). */
    gridColumnTemplate?: string;
    /** Set the vertical alignment for all GridCells. Default: center. PLEASE NOTE: the center alignment is achieved by using a flexbox column layout,
     * which means that all child elements of the cell will be stacked vertically. To avoid this, wrap the elements in their own div */
    cellVerticalAlignment?: CellVerticalAlignmentType;
    /** Children to render in the DataGrid */
    children?: React.ReactNode;
    /** Add a class name */
    className?: string;
}
export {};
//# sourceMappingURL=DataGrid.component.d.ts.map