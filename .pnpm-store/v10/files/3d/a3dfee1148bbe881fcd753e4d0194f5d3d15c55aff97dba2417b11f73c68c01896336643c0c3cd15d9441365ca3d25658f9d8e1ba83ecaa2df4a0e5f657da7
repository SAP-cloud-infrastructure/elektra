import { default as React, ReactNode } from 'react';
/**
A controlled Text Input.
Also covers email, telephone, password, url derivates.
*/
export declare const Textarea: React.FC<TextareaProps>;
type WidthType = "full" | "auto";
export interface TextareaProps extends React.HTMLProps<HTMLTextAreaElement> {
    /** Pass a name attribute */
    name?: string;
    /** The label of the textarea */
    label?: string;
    /** Pass a value */
    value?: string | number;
    /** Pass an id */
    id?: string;
    /** Pass a placeholder */
    placeholder?: string;
    /** Render a disabled input */
    disabled?: boolean;
    /** Render a readonly input */
    readOnly?: boolean;
    /** Whether the field is required */
    required?: boolean;
    /** Whether the field is invalid */
    invalid?: boolean;
    /** Whether the field is valid */
    valid?: boolean;
    /** Whether the field receives autofocus */
    autoFocus?: boolean;
    /** Pass a classname. The class name is applied to the internal textarea element. */
    className?: string;
    /** Pass a valid autocomplete value. We do not police validity. */
    autoComplete?: string;
    /** Pass a change handler */
    onChange?: React.ChangeEventHandler<HTMLTextAreaElement>;
    /** Pass a focus handler */
    onFocus?: React.FocusEventHandler<HTMLTextAreaElement>;
    /** Pass a blur handler */
    onBlur?: React.FocusEventHandler<HTMLTextAreaElement>;
    /** A helptext to render to explain meaning and significance of the Textarea */
    helptext?: ReactNode;
    /** A text to render when the Textarea was successfully validated */
    successtext?: ReactNode;
    /** A text to render when the Textarea has an error or could not be validated */
    errortext?: ReactNode;
    /** The width of the textarea. Either 'full' (default) or 'auto'. */
    width?: WidthType;
    /** Pass a custom className to the wrapping element. This can be useful if you must add styling to the outermost wrapping element of this component, e.g. for positioning. */
    wrapperClassName?: string;
}
export {};
//# sourceMappingURL=Textarea.component.d.ts.map