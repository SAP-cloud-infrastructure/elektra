import { default as React } from 'react';
import { AppShellProps } from './index';
declare const _default: {
    title: string;
    component: React.FC<AppShellProps>;
    argTypes: {
        pageHeader: {
            control: boolean;
        };
        pageFooter: {
            control: boolean;
        };
        topNavigation: {
            control: boolean;
        };
        sideNavigation: {
            control: boolean;
        };
        children: {
            control: boolean;
        };
    };
};
export default _default;
export declare const Default: {
    render: ({ children, ...args }: AppShellProps) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        children: React.JSX.Element[];
    };
};
export declare const Embedded: {
    render: ({ children, ...args }: AppShellProps) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        embedded: boolean;
        children: React.JSX.Element[];
    };
};
export declare const EmbeddedWithTopNav: {
    render: ({ children, ...args }: AppShellProps) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        embedded: boolean;
        topNavigation: React.JSX.Element;
        children: React.JSX.Element[];
    };
};
export declare const EmbeddedWithSideNav: {
    render: ({ children, ...args }: AppShellProps) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        embedded: boolean;
        sideNavigation: React.JSX.Element;
        children: React.JSX.Element[];
    };
};
export declare const AppName: {
    render: ({ children, ...args }: AppShellProps) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        pageHeader: string;
        children: React.JSX.Element[];
    };
};
export declare const CustomPageHeader: {
    render: ({ children, ...args }: AppShellProps) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        pageHeader: React.JSX.Element;
        children: React.JSX.Element[];
    };
};
export declare const CustomPageFooter: {
    render: ({ children, ...args }: AppShellProps) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        pageFooter: React.JSX.Element;
        children: React.JSX.Element[];
    };
};
export declare const WithSideNavigation: {
    render: ({ children, ...args }: AppShellProps) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        sideNavigation: React.JSX.Element;
        children: React.JSX.Element[];
    };
};
export declare const WithTopNavigation: {
    render: ({ children, ...args }: AppShellProps) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        topNavigation: React.JSX.Element;
        children: React.JSX.Element[];
    };
};
export declare const WithSideAndTopNavigation: {
    render: ({ children, ...args }: AppShellProps) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        topNavigation: React.JSX.Element;
        sideNavigation: React.JSX.Element;
        children: React.JSX.Element[];
    };
};
export declare const WithTabNavigation: {
    render: ({ children, ...args }: AppShellProps) => React.JSX.Element;
    parameters: {};
    args: {
        children: React.JSX.Element[];
    };
};
//# sourceMappingURL=AppShell.stories.d.ts.map