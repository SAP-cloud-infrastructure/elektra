import { default as React, CSSProperties } from 'react';
import { useInteractions } from '@floating-ui/react';
import { ToolTipVariant, TooltipPlacement } from './ToolTip.types';
type TriggerEvent = "click" | "hover";
export interface UseTooltipProps {
    initialOpen?: boolean;
    variant?: ToolTipVariant;
    placement?: TooltipPlacement;
    triggerEvent?: TriggerEvent;
    open?: boolean;
    onOpenChange?: (_open: boolean) => void;
    disabled?: boolean;
}
/**
 * Hook that controls the state of the tooltip.
 *
 * @param {*} param0
 * @returns
 */
export declare const useTooltip: ({ initialOpen, variant, placement, triggerEvent, open: controlledOpen, onOpenChange: setControlledOpen, disabled, }?: UseTooltipProps) => {
    floatingStyles: CSSProperties | undefined;
    open: boolean;
    setOpen: (open: boolean) => void;
    variant?: ToolTipVariant;
    disabled: boolean;
    getReferenceProps: ReturnType<typeof useInteractions>["getReferenceProps"];
    getFloatingProps: ReturnType<typeof useInteractions>["getFloatingProps"];
    refs?: {
        reference: React.RefObject<HTMLElement>;
        floating: React.RefObject<HTMLElement>;
        setReference: () => void;
        setFloating: (node: HTMLElement | null) => void;
    };
    x?: number | null;
    y?: number | null;
    strategy: "absolute" | "fixed";
    placement: TooltipPlacement;
    middlewareData: any;
    context: any;
};
export {};
//# sourceMappingURL=useTooltip.d.ts.map