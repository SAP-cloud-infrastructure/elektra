import { default as React, FC } from 'react';
type EventHandler = (event: React.MouseEvent<HTMLElement>, id: string) => void;
/**
A Pill to represent a value, or key and value. Can e.g. be used to represent selected filter values in a filter component. Can optionally be closed. On close the uid, if provided, or the pillKey is returned in the callback.
 */
export declare const Pill: FC<PillProps>;
export interface PillProps extends Omit<React.HTMLAttributes<HTMLDivElement>, "onClick"> {
    /** The unique identifier of the pill. Returned by the onClose callback */
    uid?: string;
    /** The key of the filter the pill represents. Returned by the onClose callback if uid undefined. Optional. */
    pillKey?: string;
    /** The visible label to describe the pill key. If not set pillKey is used. Optional. */
    pillKeyLabel?: string;
    /** The value of filter the pill represents. Returned by the onClose callback if uid and pillKey undefined */
    pillValue: string;
    /** The visible label to describe the pill value. If not set pillValue is used. Optional. */
    pillValueLabel?: string;
    /** Add custom classNames */
    className?: string;
    /** Whether the pill should be closeable */
    closeable?: boolean;
    /** Pass a handler to be executed when closing the Pill. Also returns the event and the uid (fallback: pillKey -> fallback: pillValue) */
    onClose?: EventHandler;
    /** Pass a handler to be executed when clicking on the Pill (but not on the close button). Also returns the event and the uid (fallback: pillKey -> fallback: pillValue) */
    onClick?: EventHandler;
}
export {};
//# sourceMappingURL=Pill.component.d.ts.map