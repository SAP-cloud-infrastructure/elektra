import { default as React } from 'react';
import { Select, SelectProps } from './Select.component';
import { Meta, StoryObj } from '@storybook/react';
declare const meta: Meta<typeof Select>;
export default meta;
type Story = StoryObj<typeof Select>;
interface BottomPositionProps extends SelectProps {
    parentStyles: React.CSSProperties;
}
export declare const Default: Story;
export declare const Primary: Story;
export declare const PrimaryDanger: Story;
export declare const Subdued: Story;
export declare const WithPlaceholder: Story;
export declare const WithLabel: Story;
export declare const RequiredWithLabel: Story;
export declare const Disabled: Story;
export declare const DisabledOption: Story;
export declare const Valid: Story;
export declare const Invalid: Story;
export declare const WithHelptext: Story;
export declare const WithHelptextAsNode: Story;
export declare const WithErrortext: Story;
export declare const WithSuccesstext: Story;
export declare const Error: Story;
export declare const Loading: Story;
export declare const ManyOptions: Story;
export declare const EmptyOption: Story;
export declare const OptionsWithLabels: Story;
export declare const UncontrolledSelectWithDefaultValue: Story;
export declare const ControlledSelect: Story;
/**
 * If you used the Select as a controlled component (by passing the `value` prop) and if your SelectOptions
 * have labels, then you'll have to pass the `valueLabel` of the selected option as well.
 * */
export declare const ControlledSelectWithOptionLabels: Story;
export declare const UncontrolledSelect: Story;
/**
 * Similar to the controlled Select, if you used the Select as an uncontrolled component (by passing the `defaultValue` prop) and if your SelectOptions
 * have labels, then you'll have to pass the `valueLabel` of the selected option as well.
 */
export declare const UncontrolledSelectWithOptionLabels: Story;
export declare const TruncatedOptions: Story;
export declare const NonTruncatedOptions: Story;
/**
 * As an alernative to using a `value`-prop, strings as children can be passed. Though we don't recommend this approach
 * as it will likely be deprecated or changed in the future.
 * */
export declare const WithChildrenOnly: Story;
export declare const MultiSelect: Story;
export declare const MultiSelectWithValue: Story;
export declare const MultiSelectWithOptionValuesAndLabels: Story;
type BottomPositionStory = StoryObj<BottomPositionProps>;
export declare const BottomPositionedSelect: BottomPositionStory;
//# sourceMappingURL=Select.stories.d.ts.map