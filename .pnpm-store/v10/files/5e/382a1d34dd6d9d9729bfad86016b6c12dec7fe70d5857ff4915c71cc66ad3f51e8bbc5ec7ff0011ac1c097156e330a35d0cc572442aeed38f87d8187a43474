import { default as React } from 'react';
declare const _default: {
    title: string;
    component: React.FC<import('./DateTimePicker.component').DateTimePickerProps>;
    argTypes: {
        mode: {
            options: string[];
            control: {
                type: string;
            };
        };
        defaultDate: {
            table: {
                type: {
                    summary: string;
                };
            };
        };
        defaultValue: {
            table: {
                type: {
                    summary: string;
                };
            };
        };
        locale: {
            table: {
                type: {
                    summary: string;
                };
            };
        };
        maxDate: {
            table: {
                type: {
                    summary: string;
                };
            };
        };
        minDate: {
            table: {
                type: {
                    summary: string;
                };
            };
        };
        value: {
            control: boolean;
            table: {
                type: {
                    summary: string;
                };
            };
        };
        errortext: {
            control: boolean;
            table: {
                type: {
                    summary: string;
                };
            };
        };
        helptext: {
            control: boolean;
            table: {
                type: {
                    summary: string;
                };
            };
        };
        successtext: {
            control: boolean;
            table: {
                type: {
                    summary: string;
                };
            };
        };
        monthSelectorType: {
            options: string[];
            control: {
                type: string;
            };
        };
        width: {
            options: string[];
            control: {
                type: string;
            };
        };
        disable: {
            control: boolean;
        };
        onBlur: {
            control: boolean;
            table: {
                type: {
                    summary: string;
                };
            };
        };
        onChange: {
            control: boolean;
            table: {
                type: {
                    summary: string;
                };
            };
        };
        onClear: {
            control: boolean;
            table: {
                type: {
                    summary: string;
                };
            };
        };
        onClose: {
            control: boolean;
            table: {
                type: {
                    summary: string;
                };
            };
        };
        onFocus: {
            control: boolean;
            table: {
                type: {
                    summary: string;
                };
            };
        };
        onReady: {
            control: boolean;
            table: {
                type: {
                    summary: string;
                };
            };
        };
        onOpen: {
            control: boolean;
            table: {
                type: {
                    summary: string;
                };
            };
        };
        onMonthChange: {
            control: boolean;
            table: {
                type: {
                    summary: string;
                };
            };
        };
        onYearChange: {
            control: boolean;
            table: {
                type: {
                    summary: string;
                };
            };
        };
    };
};
export default _default;
export declare const Default: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    args: {};
};
export declare const WithLabel: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    args: {
        label: string;
    };
};
export declare const Required: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    args: {
        label: string;
        required: boolean;
    };
};
export declare const Disabled: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    args: {
        label: string;
        disabled: boolean;
    };
};
export declare const WithPlaceholder: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    args: {
        placeholder: string;
    };
};
export declare const WithValue: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        value: Date;
    };
};
export declare const WithDefaultDate: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        defaultDate: Date;
    };
};
export declare const WithDefaultHourAndMinute: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        defaultHour: number;
        defaultMinute: number;
        enableTime: boolean;
        helptext: string;
    };
};
export declare const WithDefaultValue: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        defaultValue: Date;
    };
};
export declare const WithValueAsDateString: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        value: string;
    };
};
export declare const WithValueAsIsoDateString: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        value: string;
    };
};
export declare const WithValueAsTimestamp: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        value: number;
    };
};
export declare const WithValueAsTodayShortcut: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        value: string;
    };
};
export declare const WithCustomDateFormat: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {};
    args: {
        value: string;
        dateFormat: string;
    };
};
export declare const WithTime: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        enableTime: boolean;
    };
};
export declare const WithTimeAndSeconds: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        enableTime: boolean;
        enableSeconds: boolean;
    };
};
export declare const WithTimeWithCustomHourIncrement: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        enableTime: boolean;
        hourIncrement: number;
        helptext: string;
    };
};
export declare const WithTimeWithCustomMinuteIncrement: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        enableTime: boolean;
        minuteIncrement: number;
        helptext: string;
    };
};
export declare const With24hTime: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        enableTime: boolean;
        time_24hr: boolean;
    };
};
export declare const ShowTwoMonths: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        showMonths: number;
    };
};
export declare const WithWeekNumbers: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        weekNumbers: boolean;
    };
};
export declare const WithShorthandCurrentMonth: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        shorthandCurrentMonth: boolean;
    };
};
export declare const WithMonthSelectorDropdown: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        monthSelectorType: string;
    };
};
export declare const AllowInput: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        allowInput: boolean;
    };
};
export declare const Multiple: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        mode: string;
    };
};
export declare const Range: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        mode: string;
    };
};
export declare const TimePicker: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        enableTime: boolean;
        noCalendar: boolean;
        enableSeconds: boolean;
    };
};
export declare const WithMinDate: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        minDate: Date;
        helptext: string;
    };
};
export declare const WithMaxDate: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        maxDate: Date;
        helptext: string;
    };
};
export declare const DisableDate: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        disable: Date[];
        helptext: string;
    };
};
export declare const DisableByFunction: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        disable: ((date: Date) => boolean)[];
        locale: {
            firstDayOfWeek: number;
        };
        helptext: string;
    };
};
export declare const Valid: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    args: {
        valid: boolean;
    };
};
export declare const Invalid: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    args: {
        invalid: boolean;
    };
};
export declare const WithErrortext: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    args: {
        errortext: string;
    };
};
export declare const WithSuccesstext: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    args: {
        successtext: string;
    };
};
export declare const WithHelptext: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    args: {
        helptext: string;
    };
};
export declare const InvalidPreload: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        allowInvalidPreload: boolean;
        value: string;
        disable: string[];
        helptext: string;
    };
};
export declare const ControlledDateTimePicker: {
    render: ({ ...args }: {
        [x: string]: any;
    }) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {};
};
//# sourceMappingURL=DateTimePicker.stories.d.ts.map