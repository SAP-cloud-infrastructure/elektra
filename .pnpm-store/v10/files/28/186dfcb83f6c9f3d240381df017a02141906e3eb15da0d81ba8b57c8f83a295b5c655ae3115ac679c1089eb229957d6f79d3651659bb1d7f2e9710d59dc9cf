import { default as React } from 'react';
type StoryDefinition = () => React.ReactNode;
declare const _default: {
    title: string;
    component: React.FC<import('./PopupMenu.component').PopupMenuProps>;
    subcomponents: {
        PopupMenuToggle: React.FC<import('./PopupMenu.component').PopupMenuToggleProps>;
        PopupMenuOptions: React.FC<import('./PopupMenu.component').PopupMenuOptionsProps>;
        PopupMenuItem: React.FC<import('./PopupMenu.component').PopupMenuItemProps>;
        PopupMenuSection: React.FC<import('./PopupMenu.component').PopupMenuSectionProps>;
    };
    argTypes: {
        children: {
            control: boolean;
        };
        icon: {
            options: string[];
            control: {
                type: string;
            };
        };
    };
    decorators: ((story: StoryDefinition) => React.JSX.Element)[];
};
export default _default;
export declare const Default: {
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        children: React.JSX.Element;
        onClose: import('@storybook/addon-actions').HandlerFunction;
        onOpen: import('@storybook/addon-actions').HandlerFunction;
    };
};
export declare const NoMenu: {
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        onClose: import('@storybook/addon-actions').HandlerFunction;
        onOpen: import('@storybook/addon-actions').HandlerFunction;
    };
};
export declare const DisabledDefaultToggle: {
    parameters: {
        args: {
            description: {
                story: string;
            };
        };
    };
    args: {
        disabled: boolean;
        onClose: import('@storybook/addon-actions').HandlerFunction;
        onOpen: import('@storybook/addon-actions').HandlerFunction;
    };
};
export declare const WithMenuChild: {
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        children: React.JSX.Element;
        onClose: import('@storybook/addon-actions').HandlerFunction;
        onOpen: import('@storybook/addon-actions').HandlerFunction;
    };
};
export declare const WithChildrenAsLinks: {
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        children: React.JSX.Element;
        onClose: import('@storybook/addon-actions').HandlerFunction;
        onOpen: import('@storybook/addon-actions').HandlerFunction;
    };
};
export declare const WithMenuWithRandomContent: {
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        children: React.JSX.Element;
        onClose: import('@storybook/addon-actions').HandlerFunction;
        onOpen: import('@storybook/addon-actions').HandlerFunction;
    };
};
export declare const WithMenuChildWithSection: {
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        children: React.JSX.Element;
        onClose: import('@storybook/addon-actions').HandlerFunction;
        onOpen: import('@storybook/addon-actions').HandlerFunction;
    };
};
export declare const WithIcon: {
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        icon: string;
        children: React.JSX.Element;
        onClose: import('@storybook/addon-actions').HandlerFunction;
        onOpen: import('@storybook/addon-actions').HandlerFunction;
    };
};
export declare const WithToggleAndMenuChildren: {
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        children: React.JSX.Element[];
        onClose: import('@storybook/addon-actions').HandlerFunction;
        onOpen: import('@storybook/addon-actions').HandlerFunction;
    };
};
export declare const WithToggleAsButtonComponent: {
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        children: React.JSX.Element[];
        onClose: import('@storybook/addon-actions').HandlerFunction;
        onOpen: import('@storybook/addon-actions').HandlerFunction;
    };
};
export declare const WithToggleAsButtonStyledByState: {
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        children: React.JSX.Element[];
        onClose: import('@storybook/addon-actions').HandlerFunction;
        onOpen: import('@storybook/addon-actions').HandlerFunction;
    };
};
export declare const WithCustomButtonComponentAsChild: {
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        children: React.JSX.Element[];
        onClose: import('@storybook/addon-actions').HandlerFunction;
        onOpen: import('@storybook/addon-actions').HandlerFunction;
    };
};
//# sourceMappingURL=PopupMenu.stories.d.ts.map