import { default as React } from 'react';
export type MessageVariantType = "info" | "warning" | "danger" | "error" | "success";
export interface MessageProps extends React.HTMLAttributes<HTMLDivElement> {
    /**
     * Pass an optional title.
     */
    title?: string;
    /**
     * Pass an optional string of text to be rendered as content.
     * Alternatively, content can be passed as children (see below).
     * If children are provided, they will take precedence.
     */
    text?: string;
    /**
     * Specify an optional semantic variant that determines the appearance of a message.
     */
    variant?: MessageVariantType;
    /**
     * Optional. If true, the message will have a 'close' button to dismiss it.
     */
    dismissible?: boolean;
    /**
     * Optional. If true, the message will be automatically dismissed after the default or passed autoDismissTimeout.
     */
    autoDismiss?: boolean;
    /**
     * Optional. The timeout in milliseconds after which the message auto-dismisses.
     * By default 10000 (10s).
     */
    autoDismissTimeout?: number;
    /**
     * Optional. Pass a handler that will be called when the message is dismissed.
     */
    onDismiss?: () => void;
    /**
     * Pass an optional CSS class to apply to the message.
     */
    className?: string;
    /**
     * Pass optional React nodes or a collection of React nodes to be rendered as content.
     * Takes precedence over the text property.
     */
    children?: React.ReactNode;
}
/**
 * A Message holds generally important information to help understand the contents, purpose, or state of a whole page or view.
 * Use sparingly, there should never be two or more subsequent instances of Message as direct siblings/neighbors on an individual view.
 */
export declare const Message: React.FC<MessageProps>;
//# sourceMappingURL=Message.component.d.ts.map