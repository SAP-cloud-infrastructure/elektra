/**
 * Encode json data using json-url or lz-string. It automatically detects the best encoding.
 * @param {JSON} json data to be encoded
 * @param {Object} options options for the encoding. Possible values: mode: "auto" or "humanize"
 * @returns encoded string
 */
declare function encode(json: any, options?: {}): any;
/**
 * Decode using json-url or lz-string. It automatically detects the encoding.
 * @param {string} string to be decoded
 * @returns json
 */
declare function decode(string: any): any;
/**
 * Converts state data to query param
 * @param {JSON} state data
 * @returns new query param string with encoded data
 */
declare function stateToQueryParam(state: any): string;
/**
 * Converts state data to url string
 * @param {JSON} state data
 * @returns new url string with encoded data
 */
declare function stateToURL(state: any): string;
/**
 *
 * @param {string} stateID
 * @returns state for stateID
 */
declare function currentState(stateID: any): any;
/**
 * Push new state. The old and the new state are merged.
 * @param {string} stateID key of the specific state in the search params
 * @param {JSON} state
 * @param {Object} historyOptions options for the window.history (state, title)
 * @param {boolean} historyOptions.state - The state object is a JavaScript object which is
 * associated with the new history entry created by pushState(). Whenever the user navigates to the new
 * state, a popstate event is fired, and the state property of the event contains a copy of the history
 * entry's state object.
 * @param {string} historyOptions.title - Most browsers currently ignores this parameter, although
 * they may use it in the future. Passing the empty string here should be safe against future
 * changes to the method.
 * @param {boolean} historyOptions.replace - If true it replaces the last state in the window history (default false).
 */
declare function push(stateID: any, state: any, historyOptions: any): void;
/**
 * Replace state. The old state is overwritten.
 * @param {string} stateID key of the specific state in the search params
 * @param {JSON} state
 * @param {Object} historyOptions options for the window.history (state, title)
 * @param {boolean} historyOptions.state - The state object is a JavaScript object which is
 * associated with the new history entry created by pushState(). Whenever the user navigates to the new
 * state, a popstate event is fired, and the state property of the event contains a copy of the history
 * entry's state object.
 * @param {string} historyOptions.title - Most browsers currently ignores this parameter, although
 * they may use it in the future. Passing the empty string here should be safe against future
 * changes to the method.
 * @param {boolean} historyOptions.replace - If true it replaces the last state in the window history (default false).
 */
declare function replace(stateID: any, state: any, historyOptions: any): void;
/**
 * Add Listener for history changes for stateID
 * @param {string} stateID
 * @param {function} listener
 */
declare function addOnChangeListener(stateID: any, listener: any): void;
/**
 * Remove listener for stateID
 * @param {string} stateID
 */
declare function removeOnChangeListener(stateID: any): void;
declare function onGlobalChange(callback: any): () => void;
declare function registerConsumer(stateID: any): {
    currentState: () => any;
    onChange: (callback: any) => () => void;
    onGlobalChange: typeof onGlobalChange;
    push: (state: any, historyOptions?: any) => void;
    replace: (state: any, historyOptions?: any) => void;
};
export { currentState, push, replace, addOnChangeListener, removeOnChangeListener, registerConsumer, stateToURL, stateToQueryParam, onGlobalChange, decode, encode, };
export { encode as encodeV2, decode as decodeV2, saveStateToUrl, readStateFromUrl } from './v2';
//# sourceMappingURL=index.d.ts.map