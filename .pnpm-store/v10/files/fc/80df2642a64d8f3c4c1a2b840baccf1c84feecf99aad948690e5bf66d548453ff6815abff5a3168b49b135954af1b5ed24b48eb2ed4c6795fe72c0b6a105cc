import { default as React } from 'react';
declare const _default: {
    title: string;
    component: React.FC<import('./DataGrid.component').DataGridProps>;
    argTypes: {
        children: {
            control: boolean;
            table: {
                type: {
                    summary: string;
                };
            };
        };
    };
};
export default _default;
interface TemplateProps {
    hideHead: boolean;
    includeColSpanRow: boolean;
    columns: number;
}
export declare const Default: {
    render: ({ hideHead, includeColSpanRow, ...args }: TemplateProps) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        columns: number;
    };
};
export declare const EqualColumnSize: {
    render: ({ hideHead, includeColSpanRow, ...args }: TemplateProps) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        columns: number;
        columnMaxSize: string;
    };
};
export declare const ColumnMinSize: {
    render: ({ hideHead, includeColSpanRow, ...args }: TemplateProps) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        columns: number;
        columnMinSize: string;
    };
};
export declare const MinimumSizedColumns: {
    render: ({ hideHead, includeColSpanRow, ...args }: TemplateProps) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        columns: number;
        minContentColumns: number[];
    };
};
export declare const CustomGridTemplate: {
    render: ({ hideHead, includeColSpanRow, ...args }: TemplateProps) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        gridColumnTemplate: string;
    };
};
export declare const NoHead: {
    render: ({ hideHead, includeColSpanRow, ...args }: TemplateProps) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        columns: number;
        hideHead: boolean;
    };
};
export declare const ColSpanCell: {
    render: ({ hideHead, includeColSpanRow, ...args }: TemplateProps) => React.JSX.Element;
    parameters: {
        docs: {
            description: {
                story: string;
            };
        };
    };
    args: {
        columns: number;
        includeColSpanRow: boolean;
    };
};
//# sourceMappingURL=DataGrid.stories.d.ts.map