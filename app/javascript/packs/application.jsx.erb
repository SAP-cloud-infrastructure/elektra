/* eslint no-console:0 */

import "babel-polyfill";

import { configureStore, addReducer } from 'store';
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import { configureAjaxHelper } from 'ajax_helper';
import { setPolicy } from 'policy';
import { FlashMessages } from 'lib/flashes';
import dialogs from 'lib/dialogs';

var pluginReducers = {};
var pluginContainers = {};

<% Core::PluginsManager.mountable_plugins.each do |plugin| %>
  <% if File.exists?(File.expand_path("plugins/#{plugin.name}/app/javascript/packs", __dir__)) %>
    import <%=plugin.name%> from '../../../plugins/<%=plugin.name%>/app/javascript/packs/application';
    if (<%=plugin.name%>.Reducers) {
      pluginReducers['<%=plugin.name%>'] = <%=plugin.name%>.Reducers;
    }
    if (<%=plugin.name%>.Container) {
      pluginContainers['<%=plugin.name%>'] = <%=plugin.name%>.Container;
    }
  <% end %>
<% end %>

document.addEventListener('DOMContentLoaded', () => {
  const elements = document.getElementsByClassName('content');
  const content = elements.length > 0 ? elements[0] : document.body;
  const containers = [];

  // loop over available react containers
  for(let pluginName of Object.keys(pluginContainers)) {
    // try to find the plugin specific react container
    let domElement = document.getElementById(pluginName+'_react_container');

    if (domElement) { // plugin react container exists!
      // remove domElement, cause we are going to create a new one.
      domElement.parentNode.removeChild(domElement);
      // create react component and add it to containers
      containers.push(React.createElement(pluginContainers[pluginName], Object.assign({}, {
        key: pluginName
      })))
    }
  }

  // render containers if available
  if (containers.length > 0) {
    configureAjaxHelper(window);
    setPolicy(window.policy);
    // this is the container for all react containers
    const reactContainer = content.appendChild(document.createElement('div'));
    reactContainer.className = 'react-container';
    // render!
    ReactDOM.render(
      <Provider store = { configureStore(pluginReducers) }>
        <div>
          <FlashMessages/>
          { containers.map((container) => container) }
        </div>
      </Provider>, reactContainer
    )
  }
})
// version 1
