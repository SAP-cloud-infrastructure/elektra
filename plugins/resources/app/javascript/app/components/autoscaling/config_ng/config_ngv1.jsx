import { Table, FormControl, Button, Grid, Row, Col } from 'react-bootstrap';
import { t } from '../../utils';
import { Unit } from '../../unit';

const styles = {
  detailsWrapper: {
    width: "50%", 
    maxWidth: 1024,
    height: "100vh", 
    position: "fixed", 
    top: 0, 
    right: 0, 
    backgroundColor: "#eee", 
    zIndex: 1000,
    boxShadow: "-1px 0 5px grey",
    transition: "0.5s", 
  },
  detailsContainer: {
    padding: "15px 20px 10px 15px", 
    display: "flex", 
    justifyContent: "space-between"
  }
}
//Takes a Castellum resource configuration and checks if it conforms to the
//format generated by this UI. Possible return values:
//
//  { custom: false, value: null }  -> autoscaling not enabled
//  { custom: false, value: <int> } -> autoscaling enabled through this UI
//  { custom: true }                -> autoscaling enabled through other Castellum client
const parseConfig = (config) => {
  if (!config) {
    return { custom: false, value: null };
  }
  if (!config.size_steps.single) {
    return { custom: true };
  }
  if (!config.low_threshold || !config.critical_threshold || config.high_threshold) {
    return { custom: true };
  }
  const { usage_percent: lowPerc, delay_seconds: lowSecs } = config.low_threshold;
  const { usage_percent: criticalPerc }                    = config.critical_threshold;
  if (lowSecs != 60) {
    return { custom: true };
  }
  const expectedLowPerc = criticalPerc - 0.1;
  //`if (lowPerc != expectedLowPerc)` does not always work as expected because
  //of rounding errors in previous operations; e.g. 99.9 - 50 = 49.900000000006
  //instead of 49.9
  if (Math.abs(lowPerc - expectedLowPerc) > 0.000001) {
    return { custom: true };
  }
  return { custom: false, value: 100 - criticalPerc };
}


/**
 * Config Item
 * @param {map} props 
 */
const ConfigNgItem = ({project,onClick, active, canEdit}) => {
  const enabledCount = (project?.subscopes && project?.subscopes.filter(s => !!s.data).length) || 0
  const allCount = (project?.subscopes && project?.subscopes.length) || 0
  return (
    <tr className={`${canEdit ? "clickable" : ""} ${active ? "active" : ""}`} onClick={() => canEdit && onClick()}>
      <td>
        {project.name}
        <br/>
        <span className="text-muted small">{project.id}</span>
      </td>
      <td>
        <span className={enabledCount === 0 ? "text-default" : "text-success"}>{
    enabledCount === 0 ? "Autoscaling not enabled" : `${enabledCount} of ${allCount} enabled`}
        </span>
      </td>
      <td className="snug">
        {canEdit && <Button bsStyle="primary" bsSize="small">
          Edit
        </Button>}
      </td>
    </tr>
  )
} 

/**
 * Resource scope entry
 * @param {map} props 
 */
const Subscope = ({item, onSubmit}) => {
  const unit = new Unit(item?.unitName);
  const parsed = parseConfig(item?.data);

  const [editMode,setEditMode] = React.useState(false)
  const [saving,setSaving] = React.useState(false)
  const [newValue,setNewValue] = React.useState(parsed.value ||Â "")
  const [error,setError] = React.useState(null)

  const save = React.useCallback(() => {
    const assetType = `project-quota:${item.service}:${item.resource}`;
    setSaving(true)
    setError(null)

    onSubmit(newValue,assetType)
      .catch(error => setError(error.message))
      .finally(() => {
        setSaving(false)
        setEditMode(false)
      })
  },[item,newValue])


  const updateValue = React.useCallback((value) => {
    //input sanitizing: only allow positive integer values
    value = value.replace(/[^0-9]+/, '');
    //input sanitizing: do not allow values above 90%
    if (parseInt(value) > 90) {
      value = '90';
    }

    setNewValue(value)
  })

  const hasChanged = React.useMemo(() => {
    if(parsed.value === newValue || 
       parsed.value === null && newValue === "" ||
       String(parsed.value) === String(newValue) ) return false
    return true   
  },[newValue,parsed.value])


  return <tr>
    <td className="text-nobreak">
      {item?.resourceLabel}<br/>
      <span className="small text-muted">{item?.serviceLabel}</span>
    </td>
    <td>
      {error && <><span className="text-danger">{error}</span><br/></>}
      { parsed.custom ?
          <em>Custom configuration (applied via API)</em>
        : editMode ?
        <>
          <input 
            disabled={saving}
            type='number'
            className='form-control' style={{width:'auto',display:'inline'}}
            value={newValue}
            onKeyPress={(e) => e.key === 'Enter' && save()}
            onChange={(e) => updateValue(e.target.value)}/>
          {' '}% free quota 
          <br/><span className="small text-muted">leave empty to disable</span>
        </>  
        :
        <span onClick={() => setEditMode(true)} style={{cursor: "pointer"}}>
          {parsed.value === null ?
            "not enabled"
            :
            <span>
              <strong>{parsed.value}%</strong>{" "} 
              free quota {parsed.value === 0 ? `(but at least ${unit.format(1)} free)` : ''}
            </span>
          }
        </span>
      }

    </td>
    <td>
        <Button 
          disabled={saving}
          bsStyle={editMode ? hasChanged ? "primary" : "default" : parsed.value ? "primary" : "success"} 
          bsSize="small" 
          onClick={() => editMode ? hasChanged ? save() : setEditMode(false) : setEditMode(true)}>
          {saving ? "...saving" : editMode ? hasChanged ? "save" : "cancel" : parsed.value ? "edit" : "enable"}
        </Button>
      
    </td>
  </tr>
}


/**
 * Details View for project resource scopes
 * @param {map} props 
 */
const ConfigNgDetails = ({project, onClose, open, updateConfig, deleteConfig}) => {
  const [height,setHeight] = React.useState(0)
  const [searchTerm,setSearchTerm] = React.useState("")

  React.useEffect(() => {
    const updateHeight = () => setHeight(window.innerHeight);
    const closeOnEscape = (e) => e.key === "Escape" && onClose()
    window.addEventListener('keyup',closeOnEscape)
    window.addEventListener('resize', updateHeight);
    updateHeight()
    return () => {
      window.removeEventListener('resize', updateHeight);
      window.removeEventListener('keyup', closeOnEscape)
    }
  },[])

  const submit = React.useCallback((newValue,assetType) => {
    if(!project) return
    if(newValue === '') {
      return deleteConfig(project.id,assetType)
    } else {
      const newValueInt = parseInt(newValue)
      const cfg = {
        low_threshold:      { usage_percent: 99.9 - newValueInt, delay_seconds: 60 },
        critical_threshold: { usage_percent: 100. - newValueInt },
        size_steps:         { single: true },
      }
      return updateConfig(project.id,assetType,cfg)
    }
  },[project])

  const [top,maxHeight] = React.useMemo(() => [93,height-93],[height])
  const subscopes = React.useMemo(() => {
    if(!project) return []
    return project.subscopes.filter(s => {
      if(searchTerm === "" || 
        s.serviceLabel.indexOf(searchTerm) >= 0 || 
        s.resourceLabel.indexOf(searchTerm) >= 0) return true
      return false  
    }).sort((a,b) => a.service < b.service ? -1 : a.service > b.service ? 1 : 0)
  },[project,searchTerm])

  return (

    <div style={{...styles.detailsWrapper, width: open ? "50%" : 0, top, height: maxHeight}}>
      {project && 
        <>
          <div style={{...styles.detailsContainer}}>
            <h4>Autoscaling Settings for {project && project.name}</h4>
            <div></div>
            <div>
              <button 
                type="button" 
                className="close pull-right" 
                style={{opacity: 1}}
                aria-label="Close" 
                onClick={onClose}
              >
                <span aria-hidden="true">&times;</span>
              </button>
            </div>  
          </div>
          <div style={{padding: 15, overflow: "auto", height: maxHeight-30}}>
            <Row>
              <Col xs={12} >
                <div className="form-group has-feedback has-floating-placeholder">
                  <FormControl type="text" required id="resource-searchterm" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)}/>
                  <span className="form-control-feedback">
                    {searchTerm && searchTerm !== "" 
                      ? <i className="fa fa-times text-muted" 
                          style={{pointerEvents: "auto", cursor: "pointer"}} 
                          onClick={() => setSearchTerm("")}/> 
                      : <i className="fa fa-search text-muted"/>
                    }
                  </span>
                  <label className="form-control-floating-placeholder" htmlFor="resource-searchterm">Filter by resource</label>
                </div>
              </Col>
            </Row>

            <Table responsive hover>
              <thead>
                <tr>
                  <th className="snug">Ressource</th>
                  <th>Status</th>
                  <th className="snug"></th>
                </tr>
              </thead>
              <tbody>
                {project && subscopes.map((s,i) => 
                  <Subscope 
                    key={i} 
                    item={s} 
                    onSubmit={submit}/>
                )}
              </tbody>
            </Table>
          </div>
        </>
      }
    </div>
  )
}

const AutoscalingConfig = ({
  autoscalableSubscopes, 
  projectConfigs, 
  units,
  deleteCastellumProjectResource,
  updateCastellumProjectResource,
  canEdit}) => {

  const [detailsProjectId,setDetailsProjectId] = React.useState(null)
  const [projectSearchTerm, setProjectSearchTerm] = React.useState("")

  // transform autoscalableSubscopes and projectConfig to a map
  // projectID: {id,name,subscopes: {service,resource,serviceLabel,resourceLabel,unitName, data} }
  const projectsMap = React.useMemo(() => {
    const projectItems = {}

    // for all services
    for(let service in autoscalableSubscopes) {
      // for all resources in service
      for(let resource in autoscalableSubscopes[service]) {
        const assetType = `project-quota:${service}:${resource}`;
        
        // for all projects in resource
        for(let project of autoscalableSubscopes[service][resource]){
          projectItems[project.id] = projectItems[project.id] || {...project}
          projectItems[project.id]["subscopes"] = projectItems[project.id]["subscopes"] || []
    
          projectItems[project.id]["subscopes"].push({
            service,
            resource,
            serviceLabel: t(service),
            resourceLabel: t(resource),
            unitName: units[assetType],
            data: projectConfigs[project.id].data ? projectConfigs[project.id].data[assetType] : null  
          })
          
        }
      }
    }

    return projectItems
  },[autoscalableSubscopes,projectConfigs,units])

  // sort and filter projects
  const filteredProjects = React.useMemo(() => 
    Object.values(projectsMap)
      .sort((p1,p2) => p1.name < p2.name ? -1 : p1.name > p2.name ? 1 : 0)
      .filter(p => !projectSearchTerm || projectSearchTerm === "" || 
                   p.name.indexOf(projectSearchTerm) >=0 
  ),[projectsMap,projectSearchTerm])


  return (
    <>
      <h4>Projects Autoscaling Settings</h4>

      {/* Project Filter  */}
      <Row>
        <Col xs={8} >
          <div className="form-group has-feedback has-floating-placeholder">
          <FormControl type="text" required id="searchterm" value={projectSearchTerm} onChange={(e) => setProjectSearchTerm(e.target.value)}/>
            <span className="form-control-feedback">
              {projectSearchTerm && projectSearchTerm !== "" 
                ? <i className="fa fa-times text-muted" 
                      style={{pointerEvents: "auto", cursor: "pointer"}} 
                      onClick={() => setProjectSearchTerm("")}/> 
                : <i className="fa fa-search text-muted"/>
              }
            </span>
            <label className="form-control-floating-placeholder" htmlFor="searchterm">Filter by name or id</label>
          </div>
        </Col>
        <Col xs={4}>
          <p className="form-control-static">{" "}
            Showing {filteredProjects.length} of {Object.keys(projectsMap).length} projects
          </p>
        </Col>
      </Row>

      {/* Projects List */}
      <Table hover >
        <tbody>
          {filteredProjects.map(project =>
            <ConfigNgItem 
              canEdit={canEdit}
              active={detailsProjectId === project?.id}
              onClick={() => {setDetailsProjectId(project.id)}}
              key={project.id}
              project={project} 
            />
          )}
        </tbody>
      </Table>

      {/* Details View */}
      {canEdit && //detailsProjectId &&  
        <ConfigNgDetails 
          project={projectsMap[detailsProjectId]} 
          open={!!detailsProjectId}
          updateConfig={updateCastellumProjectResource}
          deleteConfig={deleteCastellumProjectResource}
          onClose={() => setDetailsProjectId(null)}
        />
      }
    </>
  );
}

export default AutoscalingConfig
