= content_for :title do
  Access Control Lists for Container: #{@container.name}

- pl = plugin('object_storage')

= simple_modal_form_for @container, submit_action: 'Update Access', url: pl.update_access_control_container_path(URI.encode_www_form_component(@container_name)), method: :post, cancel_url: pl.containers_path do |f|
  - if @container.errors.present?
    .row
      .col-md-12
        .alert.alert-error
          = render_errors(@container.errors)
  .row
    .col-md-6
      .loading-place.loading-right
      - if has_capability?('staticweb')
        = f.input :read_acl, 
            as: :text, 
            label: "Read ACLs", 
            input_html: {:rows => 4},
            readonly: @container.public_read_access?
        %p
          = f.input :public_read_access?, as: :boolean, label: 'Public Read Access'
      - else
        = f.input :read_acl, 
          as: :text, 
          label: 'Read ACLs',
          input_html: {:rows => 4}
      = f.input :write_acl, 
          as: :text,
          label: "Write ACLs",
          input_html: {:rows => 4}
      = link_to 'Check ACLs' , '#', class: 'btn btn-default pull-right', id: 'check_acls'
    .col-md-6
      .bs-callout.bs-callout-info
        %p
          Entries in ACLs are comma-separated. Examples:
        %dl
          %dt
            %code .r:*
          %dd  Any user has read access to objects. No token is required in the request.
          %dt
            %code .rlistings
          %dd Any user can perform a HEAD or GET operation on the container provided the user also has read access on objects.  No token is required.
          %dt
            %code PROJECT_ID:USER_ID
          %dd Grant access to a user from a different project.
          %dt
            %code PROJECT_ID:*
          %dd Grant access to all users from that project.
          %dt
            %code *:USER_ID
          %dd The specified user has access. A token for the user (scoped to any project) must be included in the request.
        %p
          For more details, have a look at the
          = succeed '.' do
            = link_to "documentation", "https://docs.openstack.org/swift/latest/overview_acl.html#container-acls", target: "_blank"
  #acls

:javascript
  // handle auto \n for better reading on load
  $(document).ready(
    function(){
      read_acl_with_newline = $('textarea#container_read_acl').val().replace(/,/g,',\n');
      $('textarea#container_read_acl').val(read_acl_with_newline);
      write_acl_with_newline = $('textarea#container_write_acl').val().replace(/,/g,',\n');
      $('textarea#container_write_acl').val(write_acl_with_newline);

      $('textarea').on("propertychange input", function(){
        current_value = $(this).val();
        if (current_value.slice(-1) == ',') {
          $(this).val(current_value + '\n')
        }
      });

      $('#check_acls').click(
        function() {
          $.get("#{plugin('object_storage').check_acls_container_path()}", 
            { 
              read_acl: $('#container_read_acl').val(),
              write_acl:  $('#container_write_acl').val()
            } , function(data){
              $('#acls').html(data);
            },
            "html");
        }
      );
    }
  );

- if has_capability?('staticweb')
  :javascript
    $('#container_public_read_access').change(
      function() {
        var input = $('#container_read_acl');
        if ($(this).is(":checked")) {
          input.data('org', input.val());
          input.val('.r:*,\n.rlistings');
          input.prop('readonly', true);
       }
         else {
          input.val(input.data('org'));
          input.prop('readonly', false);
        }
      }
    );
