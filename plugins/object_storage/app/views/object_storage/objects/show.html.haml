= content_for :title do
  - if @object.is_directory?
    Directory: #{@object.path}
  - else
    File: #{@object.path}

- pl = plugin('object_storage')
- encoded_container_name = URI.encode_www_form_component(@container_name)
- encoded_object_path = URI.encode_www_form_component(@object.path)
= simple_modal_form_for @object, submit_action: 'Update object', url: pl.update_object_path(encoded_container_name, encoded_object_path), method: :post, cancel_url: pl.list_objects_path(encoded_container_name, encoded_object_path) do |f|

  .row
    .col-md-6= f.input :content_type, required: false
    .col-md-2= f.input :size_bytes, readonly: true, input_html: { value: Core::DataType.new(:bytes).format(@object.size_bytes) }, label: 'Size'
    .col-md-4= f.input :md5_hash, readonly: true, label: 'MD5 checksum'

  - if @container.allows_public_access?
    - label = capture do
      URL for public access
      = link_to '(Open in new tab)', @object.public_url, target: '_blank'
    = f.input :public_url, readonly: true, label: label

  .row
    .col-md-6= f.input :created_at, as: :string, input_html: { value: @object.created_at.to_time.getutc.strftime('%F %T') }, label: 'Uploaded (UTC)'
    .col-md-6= f.input :last_modified_at, as: :string, input_html: { value: @object.created_at.to_time.getutc.strftime('%F %T') }, label: 'Last modified (UTC)'
  - initial_value = @object.expires_at.nil? ? '' : @object.expires_at.to_time.getutc.strftime('%F %T')
  - current_value = params.fetch(:object, {}).fetch(:expires_at, initial_value)
  - placeholder   = "Enter a timestamp like \"#{1.month.from_now.strftime('%F %T')}\" to schedule automatic deletion"
  = f.input :expires_at, as: :string, label: 'Expires at (UTC)', input_html: { value: current_value, placeholder: placeholder }

  - if @object.dlo_manifest
    .row
      .col-md-12= f.input :dlo_manifest, readonly: true, label: 'Dynamic Large Object Manifest'
  - if @object.slo
    .row
      .col-md-4= f.input :slo, readonly: true, label: 'Static Large Object'
  .form-group
    %label Metadata
    = render partial: 'editable_metadata_display', locals: { metadata: @object.metadata }
