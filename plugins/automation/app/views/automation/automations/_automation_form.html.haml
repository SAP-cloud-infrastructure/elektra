= f.input :id, :as => :hidden

= f.input :name, required: true, label: 'Name', input_html: { autofocus: 'autofocus' }, placeholder: 'Enter name'

= f.input :repository, required: true, label: 'Repository', input_html: {}, placeholder: 'Enter repository'

- if form_type == 'new'
  = f.input :repository_credentials, :as => :text, label: 'Repository credentials', input_html: { class: 'auto-text-field', :rows => 5 }, placeholder: 'Enter repository credentials'

= f.input :repository_revision, label: 'Repository version', input_html: {}, placeholder: 'Enter repository revision'

= f.input :timeout, required:true, label: 'Timeout', input_html: {}, placeholder: 'Enter timeout in seconds', icon_hint: t('automation.help_hint.max_time_out')

-# NO USE CASE YET FOR AUTOMATION TAGS
-#= f.input :tags, as: :text, required: false, label: 'Tags', input_html: { data: {toggle:'tagEditor', tagEditor_type: 'key-value', tagEditor_name: 'tags'} }, placeholder: 'Enter tags',
-#  icon_hint: 'Tags are key-value pairs. See hint for more information.',
-#  help_hint: t('automation.help_hint.key_value_pairs')

- if form_type == 'new'
  = f.input :type, required: true, input_html: {data: {toggle: 'automationSwitch'}}, collection: types.sort.map {|k,v| [v,k]}, selected: selected_automation_type(automation.type)
- elsif form_type == 'edit'
  = f.input :type, readonly: true

%hr

- if form_type == 'new'
  = render partial: 'chef', locals: {f:f}
  = render partial: 'script', locals: {f:f}
- elsif form_type == 'edit'
  - if automation.type == ::Automation::Automation::Types::CHEF
    = render partial: 'chef', locals: {f:f}
  - elsif automation.type == ::Automation::Automation::Types::SCRIPT
    = render partial: 'script', locals: {f:f}
