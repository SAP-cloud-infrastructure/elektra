- if volume
  - data = {search_name: "#{volume.name} #{volume.description} #{volume.size}", marker_id: volume.id}
  - transition = false
  - volume_name = volume.name.present? ? volume.name : volume.id
  - if local_assigns.has_key?(:target_state) && volume.in_transition?(target_state)
    - transition = true
    - data[:update_url]=plugin('block_storage').update_item_volume_path(id:volume.id, target_state: target_state)
    - data[:interval]=2500

  %tr{class: "state-#{volume.status.downcase} #{'task-state' if transition}", data: data, id: "volume_#{volume.id}"}
    - if current_user.is_allowed?("block_storage:volume_get", {})
      %td
        = link_to volume_name, plugin('block_storage').volume_path(id: volume.id), data: {modal: true}
    - else
      %td= volume_name
    %td= volume.availability_zone
    %td= volume.description
    %td= volume.size
    - attachments = get_attachments(volume)
    - if !attachments.blank?
      - attachments.each do |att|
        %td
          = link_to "#{att[:server_name]}", plugin('compute').instance_path(id: att[:server_id]), data: {modal: true}
          = "on #{att[:device]}"

    - else
      %td
    %td= volume.status

    %td.snug
      - if current_user.is_allowed?("block_storage:volume_delete", {target: {scoped_domain_name: @scoped_domain_name}}) or current_user.is_allowed?("block_storage:volume_update", {target: {scoped_domain_name: @scoped_domain_name}})
        .btn-group
          - if transition
            %button.btn.btn-default.btn-sm.dropdown-toggle{ disabled: true, type: "button", data: { toggle: "dropdown"}, aria: { expanded: true} }
              %span.fa.fa-cog
          - else
            %button.btn.btn-default.btn-sm.dropdown-toggle{ type: "button", data: { toggle: "dropdown"}, aria: { expanded: true} }
              %span.fa.fa-cog
          %ul.dropdown-menu.dropdown-menu-right{ role:"menu"}
            - if current_user.is_allowed?("block_storage:volume_update", {target: {scoped_domain_name: @scoped_domain_name}})
              %li= link_to 'Change', plugin('block_storage').edit_volume_path(id: volume.id), data: {modal: true}
              - if volume.snapshotable?
                %li= link_to 'Create Snapshot', plugin('block_storage').new_snapshot_volume_path(id: volume.id), data: {modal: true}
              -# else
                %li
                  = link_to plugin('block_storage').new_snapshot_volume_path(id: volume.id), data: {modal: true} do
                    %i.fa.fa-warning.text-danger
                    Create Snapshot
            - if volume.attachments.blank? && current_user.is_allowed?("compute:attach_volume", {target: {scoped_domain_name: @scoped_domain_name}})
              %li.divider
              %li= link_to 'Attach', plugin('block_storage').edit_attach_volume_path(id: volume.id), data: {modal: true}
            - elsif current_user.is_allowed?("compute:detach_volume", {target: {scoped_domain_name: @scoped_domain_name}})
              %li.divider
              %li= link_to 'Detach', plugin('block_storage').edit_detach_volume_path(id: volume.id), data: {modal: true}
            - if current_user.is_allowed?("block_storage:volume_delete", {target: {scoped_domain_name: @scoped_domain_name}}) and volume.deletable?
              %li.divider
              %li= link_to 'Delete', plugin('block_storage').volume_path(id: volume.id), method: :delete, data: { confirm: 'Are you sure you want to delete this volume?',  confirmed: :loading_status }, remote: true
            - if current_user.is_allowed?("block_storage:volume_reset_status")
              %li.divider
              %li= link_to 'Reset Status', plugin('block_storage').new_status_volume_path(id: volume.id), data: { modal: true }
            - if current_user.is_allowed?("block_storage:volume_force_delete")
              %li= link_to 'Force Delete', plugin('block_storage').force_delete_volume_path(id: volume.id), remote: true, method: :delete, data: { confirm: 'Are you sure you want to delete this volume?',  confirmed: :loading_status }
