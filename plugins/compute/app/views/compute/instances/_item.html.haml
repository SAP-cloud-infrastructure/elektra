-# search_name and marker_id are important for searchable and ajax_paginate plugins!
- real_status = instance.task_state.nil? ? instance.status : instance.task_state # instance.status isn't always what we need. E.g. when an instance is spawned, the task_state contains the state we are interested in
- data = {search_name: instance.name+'_'+instance.id+'_'+real_status, marker_id: instance.id}
- if instance.task_state
  - data[:update_url]=plugin('compute').update_item_instance_path(id:instance.id, target_state: local_assigns[:target_state])
  - data[:interval]=10000

- state_icon = 'state-locked-icon' if instance.locked?
- state_icon = "state-#{instance.status.downcase}-icon" if state_icon.nil? && instance.status
- state_text = "Status: #{instance.task_state.nil? ? instance.status.humanize : instance.task_state.humanize}"
- state_text += " #{instance.fault['message']}" if instance.fault

- if instance.locked?
  - state_text = 'This instance is locked. Please note that |
    this status is only displayed correctly if you use the lock/unlock functions |
    via Elektra exclusively!' |

%tr{data: data, id: "instance_#{instance.id}"}
  %td
    - if state_icon
      %span{ class: state_icon,
        data: { toggle: 'tooltip', placement: 'top'},
        title: state_text}
  %td
    - name = (instance.name || '').truncate(30)
    - if current_user.is_allowed?("compute:instance_get", {})
      = link_to name, plugin('compute').instance_path(id: instance.id), data: {modal: true}
    - else
      = name
    %br
    = instance.availability_zone
    - hypervisor = instance.attributes['OS-EXT-SRV-ATTR:host'] || ''
    - if hypervisor == 'nova-compute-ironic'
      %span.badge
        %smal.text-lowercase Bare Metal

  - if @all_projects
    %td
      - project_id_and_name(instance.tenant_id)
  -# %td= instance.availability_zone
  %td.snug-nowrap
    .instance-ips{ data: { collapsable: true, collapsed: true } }
      - network_ips = network_ips_map(instance_ips(instance))
      - network_ips.each do |network_name, ips|
        .list-group.borderless
          = network_name
          = render_fixed_floating_ips(ips)
  %td
    = instance.metadata.image_name || instance.image_object.try(:name) || '-'
    %br
    = instance.flavor_object.try(:name) || '-'
  -# %td= instance.flavor_object.name if instance.flavor_object

  %td= instance.power_state_string
  %td= instance.pretty_created_at
  %td.snug
    - if current_user.is_allowed?("compute:instance_delete", {target: { project: @active_project, scoped_domain_name: @scoped_domain_name}}) or current_user.is_allowed?("compute:instance_update", {})
      .btn-group
        %button.btn.btn-default.btn-sm.dropdown-toggle{ type: "button", data: { toggle: "dropdown"}, aria: { expanded: true} }
          %span.fa.fa-cog
          -# %span.spinner

        %ul.dropdown-menu.dropdown-menu-right{ role:"menu"}
          - if current_user.is_allowed?("compute:instance_get", {target: { project: @active_project, scoped_domain_name: @scoped_domain_name}})
            %li= link_to 'VNC Console', console_instance_path(id: instance.id), target: '_blank'#data: { modal: true, load_console: true}
            %li.divider

          -# Add other actions only if instance is not in a transitioning state (creating, starting, ...)
          - unless instance.os_ext_sts_task_state
            - unless instance.locked?
              - if current_user.is_allowed?("compute:instance_update", {target: { project: @active_project, scoped_domain_name: @scoped_domain_name}})
                %li= link_to 'Edit', edit_instance_path(id: instance.id), data: {modal: true }
                %li= link_to 'Attach Floating IP', new_floatingip_instance_path(id: instance.id), data: {modal: true }
                %li= link_to 'Detach Floating IP', plugin('compute').remove_floatingip_instance_path(id: instance.id), data: { modal: true }
                %li.divider
                %li= link_to 'Attach Interface', plugin('compute').attach_interface_instance_path(id: instance.id), data: { modal: true}
                %li= link_to 'Detach Interface', plugin('compute').remove_interface_instance_path(id: instance.id), data: { modal: true}

                %li.divider
                - if [Compute::Server::SUSPENDED,Compute::Server::PAUSED,Compute::Server::SHUT_DOWN,Compute::Server::SHUT_OFF].include? instance.power_state
                  %li= link_to 'Start', start_instance_path(id: instance.id), method: :put, data: {loading_status: true}, remote: true

                - if instance.status=='ACTIVE' or instance.status=='SHUTOFF'
                  %li= link_to 'Resize', new_size_instance_path(id: instance.id), data: { modal: true}

                - if ['ACTIVE', 'SHUTOFF', 'PAUSED', 'SUSPENDED.'].include?(instance.status)
                  %li= link_to 'Create Snapshot', new_snapshot_instance_path(id: instance.id), data: { modal: true}

                - if instance.status=='VERIFY_RESIZE'
                  %li= link_to 'Confirm Resize', plugin('compute').confirm_resize_instance_path(id: instance.id), method: :put, data: {loading_status: true}, remote: true
                  %li= link_to 'Revert Resize', plugin('compute').revert_resize_instance_path(id: instance.id), method: :put, data: {loading_status: true}, remote: true


                - if instance.power_state==Compute::Server::RUNNING
                  %li.divider
                  %li= link_to 'Stop', plugin('compute').stop_instance_path(id: instance.id), method: :put, data: { confirm: 'Are you sure you want to stop this instance?', ok: "Yes, stop it", confirmed: :loading_status}, remote: true

                  %li= link_to 'Reboot', plugin('compute').reboot_instance_path(id: instance.id), method: :put, data: { confirm: 'Are you sure you want to reboot this instance?', ok: "Yes, reboot it", confirmed: :loading_status}, remote: true

                  %li= link_to 'Pause', plugin('compute').pause_instance_path(id: instance.id), method: :put, data: { confirm: 'Are you sure you want to pause this instance?', ok: "Yes, stop it", confirmed: :loading_status }, remote: true

                  %li= link_to 'Suspend', plugin('compute').suspend_instance_path(id: instance.id), method: :put, data: { confirm: 'Are you sure you want to suspend this instance?', ok: "Yes, stop it", confirmed: :loading_status}, remote: true
              - if current_user.is_allowed?("compute:instance_edit_securitygroups", {target: { project: @active_project, scoped_domain_name: @scoped_domain_name}})
                %li.divider
                %li= link_to 'Edit Security Groups', plugin('compute').edit_securitygroups_instance_path(id: instance.id), data: { modal: true}
                %li.divider

              - if current_user.is_allowed?("compute:instance_reset_status")
                %li= link_to 'Reset Status', plugin('compute').new_status_instance_path(id: instance.id), data: { modal: true }

              - if current_user.is_allowed?("compute:instance_delete", {target: { project: @active_project, scoped_domain_name: @scoped_domain_name}})
                %li= link_to 'Terminate', plugin('compute').instance_path(id: instance.id), method: :delete, data: { confirm: "Are you sure you want to terminate instance '#{instance.name}'?", ok: "Yes, terminate it", confirmed: :loading_status}, remote: true

            -# Needs Microversion 2.9 to show locked status in UI and to react appropriate to it.
            -# We simulate for now the locked status and save it in metadata
            - if current_user.is_allowed?("compute:instance_lock") || current_user.is_allowed?("compute:instance_unlock")
              %li.divider
                - if current_user.is_allowed?("compute:instance_lock")
                  %li= link_to 'Lock', plugin('compute').lock_instance_path(id: instance.id), method: :put, data: { confirm: 'Are you sure you want to lock this instance?', ok: "Yes, lock it", confirmed: :loading_status }, remote: true
                - if current_user.is_allowed?("compute:instance_unlock")
                  %li= link_to 'Unlock', plugin('compute').unlock_instance_path(id: instance.id), method: :put, data: { confirm: 'Are you sure you want to unlock this instance?', ok: "Yes, unlock it", confirmed: :loading_status }, remote: true
